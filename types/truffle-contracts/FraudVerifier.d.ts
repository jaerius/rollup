/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FraudVerifierContract
  extends Truffle.Contract<FraudVerifierInstance> {
  "new"(
    _scc: string,
    _ctc: string,
    _bm: string,
    meta?: Truffle.TransactionDetails
  ): Promise<FraudVerifierInstance>;
}

export interface ChallengeInitiated {
  name: "ChallengeInitiated";
  args: {
    batchIndex: BN;
    challenger: string;
    0: BN;
    1: string;
  };
}

export interface ChallengeResolved {
  name: "ChallengeResolved";
  args: {
    batchIndex: BN;
    success: boolean;
    0: BN;
    1: boolean;
  };
}

type AllEvents = ChallengeInitiated | ChallengeResolved;

export interface FraudVerifierInstance extends Truffle.ContractInstance {
  bondManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  canonicalTransactionChain(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  challenges(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: boolean }>;

  stateCommitmentChain(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initiateChallenge: {
    (
      _batchIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _batchIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _batchIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _batchIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  verifyStateTransition: {
    (
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resolveChallenge: {
    (
      _batchIndex: number | BN | string,
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _batchIndex: number | BN | string,
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _batchIndex: number | BN | string,
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _batchIndex: number | BN | string,
      _preStateRoot: string,
      _postStateRoot: string,
      _transaction: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    bondManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    canonicalTransactionChain(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    challenges(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: boolean }>;

    stateCommitmentChain(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    initiateChallenge: {
      (
        _batchIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _batchIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _batchIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _batchIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    verifyStateTransition: {
      (
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resolveChallenge: {
      (
        _batchIndex: number | BN | string,
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _batchIndex: number | BN | string,
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _batchIndex: number | BN | string,
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _batchIndex: number | BN | string,
        _preStateRoot: string,
        _postStateRoot: string,
        _transaction: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
